@page "/person-form"
@using Application.Repositories;
@using Application.Repositories.DTOs.AdressPart
@using Application.Repositories.DTOs.GetPersonByPesel
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using Application.Repositories.DTOs.PersonCreateProfile
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="@person" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h3>Person Information</h3>

    <div class="form-group">
        <label for="firstName">First Name:</label>
        <InputText id="firstName" class="form-control" @bind-Value="person.FirstName" />
        <ValidationMessage For="@(() => person.FirstName)" />
    </div>

    <div class="form-group">
        <label for="handName">Hand Name:</label>
        <InputText id="handName" class="form-control" @bind-Value="person.HandName" />
        <ValidationMessage For="@(() => person.HandName)" />
    </div>

    <div class="form-group">
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" class="form-control" @bind-Value="person.LastName" />
        <ValidationMessage For="@(() => person.LastName)" />
    </div>

    <div class="form-group">
        <label for="birthDate">Birth Date:</label>
        <InputDate id="birthDate" class="form-control" @bind-Value="person.BirthDate" />
        <ValidationMessage For="@(() => person.BirthDate)" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="person.Email" />
        <ValidationMessage For="@(() => person.Email)" />
    </div>

    <div class="form-group">
        <label for="phoneNumber">Phone Number:</label>
        <InputText id="phoneNumber" class="form-control" @bind-Value="person.PhoneNumber" />
        <ValidationMessage For="@(() => person.PhoneNumber)" />
    </div>

    <div class="form-group">
        <label for="pesel">PESEL:</label>
        <InputText id="pesel" class="form-control" @bind-Value="person.Pesel" />
        <ValidationMessage For="@(() => person.Pesel)" />
    </div>

    <div class="form-group">
        <label>
            <InputCheckbox @bind-Value="person.IsPep" /> Is PEPS
        </label>
    </div>

    <div class="form-group">
        <label for="lastPositionPep">Last Position PEPS:</label>
        <InputText id="lastPositionPep" class="form-control" @bind-Value="person.LastPositionPep" />
        <ValidationMessage For="@(() => person.LastPositionPep)" />
    </div>

    <h4>Address Information</h4>

    <div class="form-group">
        <label for="divisionId">Division ID:</label>
        <InputNumber id="divisionId" class="form-control" @bind-Value="person.Adress.DivisionId" />
        <ValidationMessage For="@(() => person.Adress.DivisionId)" />
    </div>

    <div class="form-group">
        <label for="streetId">Street ID:</label>
        <InputNumber id="streetId" class="form-control" @bind-Value="person.Adress.StreetId" />
        <ValidationMessage For="@(() => person.Adress.StreetId)" />
    </div>

    <div class="form-group">
        <label for="buildingNumber">Building Number:</label>
        <InputText id="buildingNumber" class="form-control" @bind-Value="person.Adress.BuildingNumber" />
        <ValidationMessage For="@(() => person.Adress.BuildingNumber)" />
    </div>

    <div class="form-group">
        <label for="apartmentNumber">Apartment Number:</label>
        <InputText id="apartmentNumber" class="form-control" @bind-Value="person.Adress.ApartmentNumber" />
        <ValidationMessage For="@(() => person.Adress.ApartmentNumber)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private PersonDtoRequest person = new PersonDtoRequest
        {
            Adress = new AdressDtoRequest()
        };
    [Inject] public IUseCasesRepository Rep { get; set; }

    private async void HandleValidSubmit()
    {
        var result = await Rep.PersonCreateProfileAsync(person);
        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo($"/");
        }
        // Handle form submission logic here
        Console.WriteLine("Form submitted!");
        // For example, send data to an API or process it as needed
    }
}

@page "/education-history-form/{id:guid}"
@using Application.Repositories;
@using Application.Repositories.DTOs.GetPersonByPesel
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using Application.Repositories
@using Application.Repositories.DTOs.EmploeePart
@using Microsoft.AspNetCore.Components.Forms
@using System;

<EditForm Model="@educationHistory" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h3>Education History Information</h3>

    
    <div class="form-group">
        <label for="regon">REGON:</label>
        <InputText id="regon" class="form-control" @bind-Value="educationHistory.Regon" />
        <ValidationMessage For="@(() => educationHistory.Regon)" />
    </div>

    <div class="form-group">
        <label for="from">From:</label>
        <InputDate id="from" class="form-control" @bind-Value="educationHistory.From" />
        <ValidationMessage For="@(() => educationHistory.From)" />
    </div>

    <div class="form-group">
        <label for="to">To:</label>
        <InputDate id="to" class="form-control" @bind-Value="educationHistory.To" />
        <ValidationMessage For="@(() => educationHistory.To)" />
    </div>

    <div class="form-group">
        <label for="field">Field:</label>
        <InputText id="field" class="form-control" @bind-Value="educationHistory.Fild" />
        <ValidationMessage For="@(() => educationHistory.Fild)" />
    </div>

    <div class="form-group">
        <label for="degree">Degree:</label>
        <InputText id="degree" class="form-control" @bind-Value="educationHistory.Degree" />
        <ValidationMessage For="@(() => educationHistory.Degree)" />
    </div>

    <div class="form-group">
        <label for="course">Course:</label>
        <InputText id="course" class="form-control" @bind-Value="educationHistory.Corse" />
        <ValidationMessage For="@(() => educationHistory.Corse)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Inject] public IUseCasesRepository Rep { get; set; }


    private EducationHistoryDtoRequest educationHistory = new EducationHistoryDtoRequest
    {

    };

    private async Task HandleValidSubmit()
    {

        educationHistory.EmploeeId = Id;

        var result = await Rep.SetEducationHistoryAsync(educationHistory);

        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo($"/");
        }
    }
}

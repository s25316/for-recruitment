// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BankMsSqlDbContext))]
    [Migration("20240830140754_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.7.24405.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Application.Database.Models.AddressPart.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuldingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("StreetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("Address_pk");

                    b.HasIndex("StreetId", "DivisionId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.AdministrativeDivision", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("AdministrativeDivision_Pk");

                    b.HasIndex("CountryId");

                    b.HasIndex("TypeId");

                    b.ToTable("AdministrativeDivision", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.AdministrativeType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("Depth")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("AdministrativeType_Pk");

                    b.ToTable("AdministrativeType", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.Collocation", b =>
                {
                    b.Property<long>("StreetId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.HasKey("StreetId", "DivisionId")
                        .HasName("Collocation_Pk");

                    b.HasIndex("DivisionId");

                    b.ToTable("Collocation", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.Country", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("Country_Pk");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.Street", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("IdSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("Street_Pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Street", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.CompanyPart.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOurClient")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Regon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("Company_pk");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.CompanyPart.EmploymentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("EmploymentHistory_pk");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmploymentHistory", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.ContactPart.ContactStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("ContactStatus_pk");

                    b.ToTable("ContactStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Utworzone"
                        },
                        new
                        {
                            Id = 2,
                            Name = "WyslaneNieOdczytane"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Anulowane"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Odzczytane"
                        },
                        new
                        {
                            Id = 5,
                            Name = "OdzczytaneZaakceptowane"
                        },
                        new
                        {
                            Id = 6,
                            Name = "OdzczytaneNieZaakaceptowane"
                        },
                        new
                        {
                            Id = 7,
                            Name = "ZwroconeZaakceptowane"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ZwroconeNieZaakaceptowane"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Zakonczone"
                        });
                });

            modelBuilder.Entity("Application.Database.Models.ContactPart.HistoryOfContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit");

                    b.Property<string>("LastMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("HistoryOfContact_pk");

                    b.HasIndex("IdStatus");

                    b.ToTable("HistoryOfContact", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.ContactPart.HistoryOfContactClient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepratmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("HistoryOfContactClient_pk");

                    b.HasIndex("ClientId");

                    b.HasIndex("DepratmentId");

                    b.ToTable("HistoryOfContactClient", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.ContactPart.HistoryOfContactCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepratmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("HistoryOfContactCompany_pk");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepratmentId");

                    b.ToTable("HistoryOfContactCompany", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.Depratment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("Depratment_pk");

                    b.HasIndex("AddressId");

                    b.ToTable("Depratment", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.DocumentPart.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("Document_pk");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.DocumentPart.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("DocumentType_pk");

                    b.ToTable("DocumentType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dowod Osobisty"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Paszport"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Karta Pobytu"
                        });
                });

            modelBuilder.Entity("Application.Database.Models.PersonPart.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmploeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("Client_pk");

                    b.HasIndex("EmploeeId");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.PersonPart.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Competences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("Employee_pk");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.PersonPart.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastPositionPep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("Person_pk");

                    b.HasIndex("AddressId");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.UniversityPart.EducationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Corse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Fild")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("EducationHistory_pk");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UniversityId");

                    b.ToTable("EducationHistory", (string)null);
                });

            modelBuilder.Entity("Application.Database.Models.UniversityPart.University", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UniversityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("University_pk");

                    b.ToTable("University", (string)null);
                });

            modelBuilder.Entity("EmployeeDepratment", b =>
                {
                    b.Property<Guid>("IdApplication.Database.Models.Depratment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdApplication.Database.Models.PersonPart.Employee")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdApplication.Database.Models.Depratment", "IdApplication.Database.Models.PersonPart.Employee");

                    b.HasIndex("IdApplication.Database.Models.PersonPart.Employee");

                    b.ToTable("EmployeeDepratment");
                });

            modelBuilder.Entity("ManagerDepratment", b =>
                {
                    b.Property<Guid>("IdApplication.Database.Models.Depratment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdApplication.Database.Models.PersonPart.Employee")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdApplication.Database.Models.Depratment", "IdApplication.Database.Models.PersonPart.Employee");

                    b.HasIndex("IdApplication.Database.Models.PersonPart.Employee");

                    b.ToTable("ManagerDepratment");
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.Address", b =>
                {
                    b.HasOne("Application.Database.Models.AddressPart.Collocation", "Collocation")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId", "DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Address_Collocation");

                    b.Navigation("Collocation");
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.AdministrativeDivision", b =>
                {
                    b.HasOne("Application.Database.Models.AddressPart.Country", "Country")
                        .WithMany("AdministrativeDivisions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Country_AdministrativeDivision");

                    b.HasOne("Application.Database.Models.AddressPart.AdministrativeType", "Type")
                        .WithMany("AdministrativeDivisions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("AdministrativeType_AdministrativeDivision");

                    b.Navigation("Country");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.Collocation", b =>
                {
                    b.HasOne("Application.Database.Models.AddressPart.AdministrativeDivision", "AdministrativeDivision")
                        .WithMany("Collocations")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Collocation_AdministrativeDivision");

                    b.HasOne("Application.Database.Models.AddressPart.Street", "Street")
                        .WithMany("Collocations")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Collocation_Street");

                    b.Navigation("AdministrativeDivision");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.Street", b =>
                {
                    b.HasOne("Application.Database.Models.AddressPart.AdministrativeType", "Type")
                        .WithMany("Streets")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("AdministrativeType_Street");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Application.Database.Models.CompanyPart.EmploymentHistory", b =>
                {
                    b.HasOne("Application.Database.Models.CompanyPart.Company", "Company")
                        .WithMany("EmploymentHistories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("EmploymentHistory_Company");

                    b.HasOne("Application.Database.Models.PersonPart.Employee", "Employee")
                        .WithMany("EmploymentHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("EmploymentHistory_Employee");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Application.Database.Models.ContactPart.HistoryOfContact", b =>
                {
                    b.HasOne("Application.Database.Models.ContactPart.ContactStatus", "Status")
                        .WithMany("HistoryOfContacts")
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("HistoryOfContact_ContactStatus");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Application.Database.Models.ContactPart.HistoryOfContactClient", b =>
                {
                    b.HasOne("Application.Database.Models.PersonPart.Client", "Client")
                        .WithMany("HistoryOfContactClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("HistoryOfContactClient_Client");

                    b.HasOne("Application.Database.Models.Depratment", "Depratment")
                        .WithMany("HistoryOfContactClients")
                        .HasForeignKey("DepratmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("HistoryOfContactClient_Depratment");

                    b.HasOne("Application.Database.Models.ContactPart.HistoryOfContact", "Contact")
                        .WithOne("HistoryOfContactClient")
                        .HasForeignKey("Application.Database.Models.ContactPart.HistoryOfContactClient", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("HistoryOfContact_HistoryOfContactClient");

                    b.Navigation("Client");

                    b.Navigation("Contact");

                    b.Navigation("Depratment");
                });

            modelBuilder.Entity("Application.Database.Models.ContactPart.HistoryOfContactCompany", b =>
                {
                    b.HasOne("Application.Database.Models.CompanyPart.Company", "Company")
                        .WithMany("HistoryOfContactCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("HistoryOfContactCompany_Company");

                    b.HasOne("Application.Database.Models.Depratment", "Depratment")
                        .WithMany("HistoryOfContactCompanies")
                        .HasForeignKey("DepratmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("HistoryOfContactCompany_Depratment");

                    b.HasOne("Application.Database.Models.ContactPart.HistoryOfContact", "Contact")
                        .WithOne("HistoryOfContactCompany")
                        .HasForeignKey("Application.Database.Models.ContactPart.HistoryOfContactCompany", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("HistoryOfContact_HistoryOfContactCompany");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Depratment");
                });

            modelBuilder.Entity("Application.Database.Models.Depratment", b =>
                {
                    b.HasOne("Application.Database.Models.AddressPart.Address", "Address")
                        .WithMany("Depratments")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Address_Depratment");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Application.Database.Models.DocumentPart.Document", b =>
                {
                    b.HasOne("Application.Database.Models.DocumentPart.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Document_DocumentType");

                    b.HasOne("Application.Database.Models.PersonPart.Person", "Person")
                        .WithMany("Documents")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Document_Person");

                    b.Navigation("DocumentType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Application.Database.Models.PersonPart.Client", b =>
                {
                    b.HasOne("Application.Database.Models.PersonPart.Employee", "Employee")
                        .WithMany("Clients")
                        .HasForeignKey("EmploeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Client_Employee");

                    b.HasOne("Application.Database.Models.PersonPart.Person", "Person")
                        .WithOne("Client")
                        .HasForeignKey("Application.Database.Models.PersonPart.Client", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Client_Person");

                    b.Navigation("Employee");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Application.Database.Models.PersonPart.Employee", b =>
                {
                    b.HasOne("Application.Database.Models.PersonPart.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("Application.Database.Models.PersonPart.Employee", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Employee_Person");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Application.Database.Models.PersonPart.Person", b =>
                {
                    b.HasOne("Application.Database.Models.AddressPart.Address", "Address")
                        .WithMany("People")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Address_Person");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Application.Database.Models.UniversityPart.EducationHistory", b =>
                {
                    b.HasOne("Application.Database.Models.PersonPart.Employee", "Employee")
                        .WithMany("EducationHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("EducationHistory_Employee");

                    b.HasOne("Application.Database.Models.UniversityPart.University", "University")
                        .WithMany("EducationHistories")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("EducationHistory_University");

                    b.Navigation("Employee");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Application.Database.Models.UniversityPart.University", b =>
                {
                    b.HasOne("Application.Database.Models.CompanyPart.Company", "Company")
                        .WithOne("University")
                        .HasForeignKey("Application.Database.Models.UniversityPart.University", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("University_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EmployeeDepratment", b =>
                {
                    b.HasOne("Application.Database.Models.Depratment", null)
                        .WithMany()
                        .HasForeignKey("IdApplication.Database.Models.Depratment")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Database.Models.PersonPart.Employee", null)
                        .WithMany()
                        .HasForeignKey("IdApplication.Database.Models.PersonPart.Employee")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagerDepratment", b =>
                {
                    b.HasOne("Application.Database.Models.Depratment", null)
                        .WithMany()
                        .HasForeignKey("IdApplication.Database.Models.Depratment")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Database.Models.PersonPart.Employee", null)
                        .WithMany()
                        .HasForeignKey("IdApplication.Database.Models.PersonPart.Employee")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.Address", b =>
                {
                    b.Navigation("Depratments");

                    b.Navigation("People");
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.AdministrativeDivision", b =>
                {
                    b.Navigation("Collocations");
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.AdministrativeType", b =>
                {
                    b.Navigation("AdministrativeDivisions");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.Collocation", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.Country", b =>
                {
                    b.Navigation("AdministrativeDivisions");
                });

            modelBuilder.Entity("Application.Database.Models.AddressPart.Street", b =>
                {
                    b.Navigation("Collocations");
                });

            modelBuilder.Entity("Application.Database.Models.CompanyPart.Company", b =>
                {
                    b.Navigation("EmploymentHistories");

                    b.Navigation("HistoryOfContactCompanies");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Application.Database.Models.ContactPart.ContactStatus", b =>
                {
                    b.Navigation("HistoryOfContacts");
                });

            modelBuilder.Entity("Application.Database.Models.ContactPart.HistoryOfContact", b =>
                {
                    b.Navigation("HistoryOfContactClient");

                    b.Navigation("HistoryOfContactCompany");
                });

            modelBuilder.Entity("Application.Database.Models.Depratment", b =>
                {
                    b.Navigation("HistoryOfContactClients");

                    b.Navigation("HistoryOfContactCompanies");
                });

            modelBuilder.Entity("Application.Database.Models.DocumentPart.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Application.Database.Models.PersonPart.Client", b =>
                {
                    b.Navigation("HistoryOfContactClients");
                });

            modelBuilder.Entity("Application.Database.Models.PersonPart.Employee", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("EducationHistories");

                    b.Navigation("EmploymentHistories");
                });

            modelBuilder.Entity("Application.Database.Models.PersonPart.Person", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("Documents");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Application.Database.Models.UniversityPart.University", b =>
                {
                    b.Navigation("EducationHistories");
                });
#pragma warning restore 612, 618
        }
    }
}

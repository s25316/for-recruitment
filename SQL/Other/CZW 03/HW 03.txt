Wykonaj 3 z poniższych zadań (oczywiście można więcej). Co najmniej jedno z nich musi być programistyczne, tzn. składać się z więcej niż jednej linii kodu (np. procedura lub trigger).

Dla tabeli emp napisz zapytanie z użyciem CASE, które wypisze nazwiska wszystkich pracowników oraz dodatkową kolumnę. Dla pracowników działu 30 zapytanie powinno w tej kolumnie wypisać "sprzedaż", dla działu 10 "księgowość", a dla pozostałych działów "pozostali".
Napisz zapytanie z użyciem CASE, które wypisze nazwiska wszystkich pracowników oraz dodatkową kolumnę. Dla pracowników z działu 30 zapytanie powinno w tej kolumnie wypisać "sprzedaż", dla pracowników działu 10 nie posiadających prowizji "księgowość bez prowizji", dla pracowników działu 10 posiadających prowizję "księgowość z prowizją", a dla pozostałych "pozostali".
Utwórz tabelę nowy_emp na bazie tabeli emp, używając do tego celu konstrukcji SELECT … INTO … Następnie nadpisz wszystkie pensje pisząc np. UPDATE nowy_emp SET sal = 0. Postaraj się naprawić nadpisane pensje przy pomocy skorelowanej instrukcji UPDATE i danych z tabeli nowy_emp.
Przetestuj instrukcję TRUNCATE TABLE.
Napisz funkcję, która będzie zwracała średnią pensję zadanego parametrem działu. Przetestuj utworzoną funkcję używając jej w zapytaniu SQL (np. w warunku WHERE - pracownicy zarabiający powyżej średniej swojego działu).
Napisz i przetestuj dowolną funkcję tabelaryczną (prostą lub złożoną).
Napisz procedurę, która sprawdzi każdego pracownika i osobom które zarabiają powyżej średniej w ich dziale obniży pensję o 10%, a osobom zarabiającym poniżej średniej, podwyższy pensję o 10%. Nie używaj funkcji z punktu 5. Wskazówka: aby procedura działała szybciej, najpierw oblicz wartości średnich zarobków i przypisz je do tymczasowej tabeli. Następnie przy pomocy kursora przejrzyj wszystkich pracowników, porównując ich pensję z wartością w tymczasowej tabeli.
Przy pomocy SCROLL CURSOR i funkcji RAND napisz procedurę wybierającą losowy wiersz z tabeli emp.
Utwórz perspektywę wyświetlającą wybrane kolumny ze złączonych tabel emp i nowy_emp. Perspektywa nie będzie dała się aktualizować. Napisz wyzwalacz typu INSTEAD OF, który umożliwi wykonanie instrukcji DELETE.
Napisz wyzwalacz nie pozwalający usuwać tabel ze swojej bazy danych.
Utwórz własny typ danych i użyj go przy tworzeniu tabeli.

--Wykonaj 3 z poniższych zadań (oczywiście można więcej). Co najmniej jedno z nich musi być programistyczne, tzn. składać się z więcej niż jednej linii kodu (np. procedura lub trigger).

--1 Dla tabeli emp napisz zapytanie z użyciem CASE, które wypisze nazwiska wszystkich pracowników oraz dodatkową kolumnę. 
--  Dla pracowników: 
--  działu 30 zapytanie powinno w tej kolumnie wypisać "sprzedaż", 
--  dla działu 10 "księgowość", a dla pozostałych działów "pozostali".

SELECT ENAME, 
	CASE DEPTNO 
		WHEN 30 THEN 'sprzedaż'
		WHEN 10 THEN 'księgowość'
		ELSE 'pozostali'
	END 'JOB'
FROM EMP;
GO;

--2 Napisz zapytanie z użyciem CASE, które wypisze nazwiska wszystkich pracowników oraz dodatkową kolumnę. 
--  Dla pracowników z działu 30 zapytanie powinno w tej kolumnie wypisać "sprzedaż", 
--  dla pracowników działu 10 nie posiadających prowizji "księgowość bez prowizji", 
--  dla pracowników działu 10 posiadających prowizję "księgowość z prowizją", 
--  a dla pozostałych "pozostali".

SELECT ENAME,
	CASE 
		WHEN DEPTNO = 30 THEN 'sprzedaż'
		WHEN DEPTNO = 10 AND ISNULL (COMM, 0) = 0 THEN 'księgowość bez prowizji'
		WHEN DEPTNO = 10 AND ISNULL (COMM, 0) > 0 THEN 'księgowość z prowizją'
		ELSE 'pozostali' 
	END 'INFO'
FROM EMP;
GO;

--3 Utwórz tabelę nowy_emp na bazie tabeli emp, używając do tego celu konstrukcji SELECT … INTO … 
--  Następnie nadpisz wszystkie pensje pisząc np. UPDATE nowy_emp SET sal = 0. 
--  Postaraj się naprawić nadpisane pensje przy pomocy skorelowanej instrukcji UPDATE i danych z tabeli nowy_emp.

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL,COMM, DEPTNO    INTO nowy_emp FROM EMP; 
UPDATE nowy_emp SET sal = 0;
UPDATE nowy_emp SET nowy_emp.sal = EMP.SAL
FROM EMP
WHERE nowy_emp.EMPNO = EMP.EMPNO;
GO; 

-- 4 Przetestuj instrukcję TRUNCATE TABLE.

TRUNCATE TABLE nowy_emp;

--5 Napisz funkcję, która będzie zwracała średnią pensję zadanego parametrem działu. 
--  Przetestuj utworzoną funkcję używając jej w zapytaniu SQL 
--  (np. w warunku WHERE - pracownicy zarabiający powyżej średniej swojego działu).
GO
CREATE FUNCTION avg_sal_by_dept (@DEPTNO INT )
RETURNS NUMERIC (8,4)
AS BEGIN
	DECLARE @FOR_RETURN NUMERIC (8,4)
	SELECT @FOR_RETURN= AVG (SAL)
	FROM EMP
	WHERE DEPTNO = @DEPTNO
	RETURN @FOR_RETURN
END
GO;
SELECT avg_sal_by_dept (30);
DROP FUNCTION avg_sal_by_dept; 

GO
--6 Napisz i przetestuj dowolną funkcję tabelaryczną (prostą lub złożoną).
GO
CREATE FUNCTION GET_FROM_EMP (@JOB VARCHAR (30))
RETURNS TABLE
AS RETURN
(
	SELECT * FROM EMP WHERE JOB = @JOB
)
GO;
SELECT * FROM GET_FROM_EMP ('CLERK');

--7 Napisz procedurę, która sprawdzi każdego pracownika i osobom które zarabiają powyżej średniej w ich dziale obniży 
--  pensję o 10%, a osobom zarabiającym poniżej średniej, podwyższy pensję o 10%. Nie używaj funkcji z punktu 5. 
--  Wskazówka: aby procedura działała szybciej, najpierw oblicz wartości średnich zarobków i przypisz je do 
--  tymczasowej tabeli. Następnie przy pomocy kursora przejrzyj wszystkich pracowników, porównując ich pensję z 
--  wartością w tymczasowej tabeli.
CREATE PROCEDURE change_sal 
AS
BEGIN 
	SELECT DEPTNO, AVG (SAL) 'AVG_DEPTNO' INTO #new_table 
	FROM EMP GROUP BY DEPTNO;

	UPDATE EMP SET SAL = SAL * 1.1 
	FROM #new_table 
	WHERE EMP.DEPTNO = #new_table.DEPTNO AND SAL >  AVG_DEPTNO

	UPDATE EMP SET SAL = SAL * 0.9 
	FROM #new_table 
	WHERE EMP.DEPTNO = #new_table.DEPTNO AND SAL <  AVG_DEPTNO
	TRUNCATE TABLE #new_table;
END; 
EXECUTE  change_sal;

--8 Przy pomocy SCROLL CURSOR i funkcji RAND napisz procedurę wybierającą losowy wiersz z tabeli emp.
CREATE PROCEDURE GET_RANDOM 
AS BEGIN
	DECLARE @MAX_COUNT INT;
	SELECT @MAX_COUNT = COUNT (1) FROM EMP;
	DECLARE @RAND INT;
	SELECT @RAND = RAND()* @MAX_COUNT +1;
	--PRINT CONVERT ( VARCHAR , @RAND )+ ' ' + CONVERT ( VARCHAR , @MAX_COUNT )
	DECLARE kursor SCROLL CURSOR FOR SELECT * FROM EMP
	OPEN kursor
		FETCH ABSOLUTE @RAND FROM kursor
	CLOSE kursor;
	DEALLOCATE kursor
END;
EXECUTE GET_RANDOM;
DROP PROCEDURE GET_RANDOM;

--9 Utwórz perspektywę wyświetlającą wybrane kolumny ze złączonych tabel emp i nowy_emp. Perspektywa nie będzie dała się aktualizować. Napisz wyzwalacz typu INSTEAD OF, który umożliwi wykonanie instrukcji DELETE.
--10 Napisz wyzwalacz nie pozwalający usuwać tabel ze swojej bazy danych.

CREATE TRIGGER NOT_ALLOWED_TO_DELETE
ON ALL SERVER
FOR DROP_TABLE
AS BEGIN 
	RAISERROR ('NIE MOZNA USUWAC TABEL', 1 , 1) 
END; 
DROP TRIGGER NOT_ALLOWED_TO_DELETE; 
-- Cannot create the trigger 'NOT_ALLOWED_TO_DELETE', because you do not have permission.


--11 Utwórz własny typ danych i użyj go przy tworzeniu tabeli.

CREATE TYPE regon FROM CHAR (9) NOT NULL;
DROP TYPE regon;
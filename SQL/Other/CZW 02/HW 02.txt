--Przy użyciu kursora przejrzyj dane wszystkich gości, sprawdź ile mieli 
--rezerwacji i jaki mają procent rabatu. Jeżeli gość miał więcej niż 2 
--rezerwacje i nie miał rezerwacji nieopłaconych, powiększ procent rabatu 
--o 5, ale nie może on przekroczyć 30. 
--Po każdej operacji powiększenia rabatu wypisz komunikat z imieniem, 
--nazwiskiem gościa oraz z wielkością poprzedniego i obecnego rabatu.

DECLARE CUR CURSOR FOR
	SELECT GOSC.IdGosc, IMIE, NAZWISKO, COUNT (IDREZERWACJA) 'COUNT', ISNULL (PROCENT_RABATU , 0 )
	FROM GOSC INNER JOIN REZERWACJA ON GOSC.IdGosc = REZERWACJA.IdGosc
	GROUP BY GOSC.IdGosc, PROCENT_RABATU, IMIE, NAZWISKO 
	HAVING COUNT (IDREZERWACJA) = COUNT (ZAPLACONA) AND COUNT (IDREZERWACJA) > 2
DECLARE @ID INT, @NAME VARCHAR (50), @SURNAME VARCHAR (50), @COUNT INT, 
		@DISCOUNT INT, @MAX_DISCOUNT INT, @MAX_DISCOUNT_UPDATE INT, @NEW_DISCOUNT INT

OPEN CUR
	FETCH NEXT FROM CUR INTO @ID , @NAME, @SURNAME , @COUNT , @DISCOUNT 
	SET @MAX_DISCOUNT = 30;
	SET @MAX_DISCOUNT_UPDATE = 5 ;
	
	-- 0 - wiersz pobrany pomyślnie
	-- -1 - błąd pobrania, bądź przekroczenie zakresu wierszy
	-- -2 - żadne wiersze nie zostały pobrane
	WHILE @@FETCH_STATUS = 0 
		BEGIN
			SET @NEW_DISCOUNT = @DISCOUNT + @MAX_DISCOUNT_UPDATE;
			IF @NEW_DISCOUNT <= @MAX_DISCOUNT
				BEGIN					
					UPDATE GOSC SET PROCENT_RABATU = @NEW_DISCOUNT WHERE IdGosc = @ID
					PRINT 'UPDATED: NAME - '+ @NAME + ', SURNAME - ' + @SURNAME + ', OLD DISCOUNT - ' +	
					CONVERT ( VARCHAR , @DISCOUNT )  + ', NEW DISCOUNT - ' + CONVERT ( VARCHAR , @NEW_DISCOUNT ) 			
				END
			FETCH NEXT FROM CUR INTO @ID , @NAME, @SURNAME , @COUNT , @DISCOUNT
		END
CLOSE CUR;
DEALLOCATE CUR;
GO;


--Napisz procedurę służącą do usuwania nieopłaconych rezerwacji. Usunąć 
--nieopłaconą rezerwację można wówczas, gdy jej termin DataDo jest mniejszy 
--od bieżącej daty. Jeżeli jest to jedyna rezerwacja danego gościa, usuń 
--również dane tego gościa. Po każdej operacji wypisz komunikat z informacją 
--o tym, co zostało wykonane (wraz z imieniem i nazwiskiem gościa).


CREATE PROCEDURE DELETENG_REZERVATIONS
AS 
BEGIN
	DECLARE @IDGOSC INT,  @NAME VARCHAR (50), @SURNAME VARCHAR (50), 
			@COUNT_REZERVATIONS_OF_KL INT, @COUNT_TO_DELETE_REZERVATIONS_OF_KL INT;
	WHILE 0 < 
			(
				SELECT COUNT (IDGOSC)
				FROM REZERWACJA 
				WHERE DATADO < GETDATE() AND ZAPLACONA = 0
			)
		BEGIN
			SELECT @IDGOSC = MIN (IDGOSC)
			FROM REZERWACJA 
			WHERE DATADO < GETDATE() AND ZAPLACONA = 0;

			SELECT @NAME = IMIE, @SURNAME = NAZWISKO
			FROM GOSC
			WHERE IDGOSC = @IDGOSC;

			SELECT @COUNT_REZERVATIONS_OF_KL = COUNT (IDGOSC)
			FROM REZERWACJA
			WHERE IDGOSC = @IDGOSC;

			SELECT @COUNT_TO_DELETE_REZERVATIONS_OF_KL = COUNT (IDGOSC)
			FROM REZERWACJA
			WHERE DATADO < GETDATE() AND ZAPLACONA = 0 AND IDGOSC = @IDGOSC;

			IF @COUNT_TO_DELETE_REZERVATIONS_OF_KL = @COUNT_REZERVATIONS_OF_KL
				BEGIN
					DELETE FROM REZERWACJA WHERE IDGOSC = @IDGOSC;
					DELETE FROM GOSC WHERE IDGOSC = @IDGOSC;
					PRINT 'KLIENT ID - '+ CONVERT ( VARCHAR , @IDGOSC ) +
						  ', IMIE - ' + @NAME +', NAZWISKO ' +	@SURNAME +
						  ', MIAL REZERWACJI DO USUNIECIA-'+
							CONVERT ( VARCHAR , @COUNT_TO_DELETE_REZERVATIONS_OF_KL ) + '/' + 
							CONVERT ( VARCHAR , @COUNT_REZERVATIONS_OF_KL )+
							' KTORE ZOSTALY USUNIETE RAZEM Z KLIENTEM';
				END;
			ELSE
				BEGIN
					DELETE FROM REZERWACJA WHERE IDGOSC = @IDGOSC AND DATADO < GETDATE() AND ZAPLACONA = 0;
					PRINT 'KLIENT ID - '+ CONVERT ( VARCHAR , @IDGOSC ) +
						  ', IMIE - ' + @NAME +', NAZWISKO ' +	@SURNAME +
						  ', MIAL REZERWACJI DO USUNIECIA-'+
							CONVERT ( VARCHAR , @COUNT_TO_DELETE_REZERVATIONS_OF_KL ) + '/' + 
							CONVERT ( VARCHAR , @COUNT_REZERVATIONS_OF_KL )+
							' KTORE ZOSTALY USUNIETE';
				END;
		END;	 
END;
EXECUTE DELETENG_REZERVATIONS;
DROP PROCEDURE DELETENG_REZERVATIONS;
GO;


--Napisz wyzwalacz, który przy próbie dopisania nowej rezerwacji sprawdzi, 
--czy gość nie ma nieopłaconych rezerwacji, których termin DataDo minął. 
--W takim przypadku należy anulować rezerwację i wypisać stosowny komunikat.

-- JESLI DOBRZE ZROZUMIAŁEM TRESC ZADANIA TO TRZEBA WYŁOWAĆ KOMUNIKAT I 
-- ANULOWAC REZERWACJE W WYPADKU WYSTAPIENIA U TEGO KLIENTA NIEPOŁACONYCH REZERWACJI 
CREATE TRIGGER ADDD_RESERVATION ON REZERWACJA
AFTER INSERT
AS
BEGIN
	IF EXISTS (
			SELECT 1 FROM  INSERTED AS I  WHERE I.IDGOSC IN 
				(
					SELECT DISTINCT (IDGOSC)
					FROM REZERWACJA
					WHERE DATADO < GETDATE() AND ZAPLACONA = 0
				)
			)
		BEGIN
			RAISERROR('KLIENT MA NIEOPŁACONE REZERWACJE', 1, 1);
			ROLLBACK; 
		END;
END;
DROP TRIGGER ADDD_RESERVATION;
INSERT INTO Rezerwacja (IdRezerwacja, DataOd, DataDo, IdGosc, NrPokoju, Zaplacona) VALUES (12223, '2009-07-01', '2009-07-05', 1, 101, 1);
